*****************************************C++ Notes*****************************************
- C++ is a statically typed, compiled, general-purpose, case-sensitive, free-form programming language that supports procedural, object-oriented, and generic programming.
- C++ is regarded as a middle-level language, as it comprises a combination of both high-level and low-level language features.
- C++ is a superset of C, and that virtually any legal C program is a legal C++ program.
- Object-Oriented Programming:
	- C++ fully supports object-oriented programming, including the four pillars of object-oriented development
		- Encapsulation
		- Data hiding
		- Inheritance
		- Polymorphism

- Standard Libraries:
	- Standard C++ consists of three important parts
		 - The core language giving all the building blocks including variables, data types and literals, etc.
		 - The C++ Standard Library giving a rich set of functions manipulating files, strings, etc.
		 - The Standard Template Library (STL) giving a rich set of methods manipulating data structures, etc.

- The ANSI Standard:
	- The ANSI standard is an attempt to ensure that C++ is portable
	- that code you write for Microsoft's compiler will compile without errors, using a compiler on a Mac, UNIX, a Windows box, or an Alpha.

Basic Syntax:
	- When we consider a C++ program, it can be defined as a collection of objects that communicate via invoking each other's methods.
		Object 
			− Objects have states and behaviors.
			- An object is an instance of a class.
			Example: A dog has states - color, name, breed as well as behaviors - wagging, barking, eating. 
		Class 
			− A class can be defined as a template/blueprint that describes the behaviors/states that object of its type support.
		Methods 
			− A method is basically a behavior. 
			- A class can contain many methods. 
			- It is in methods where the logics are written, data is manipulated and all the actions are executed.
		Instance Variables 
			− Each object has its unique set of instance variables. 
			- An object's state is created by the values assigned to these instance variables.
	Ex:
		#include <iostream>
		using namespace std;

		// main() is where program execution begins.
		int main() {
		   cout << "Hello World"; // prints Hello World
		   return 0;
		}
	- The C++ language defines several headers, which contain information that is either necessary or useful to your program. For this program, the header <iostream> is needed.
	- The line using namespace std; tells the compiler to use the std namespace. Namespaces are a relatively recent addition to C++.
	- The next line '// main() is where program execution begins.' is a single-line comment available in C++.
	- Single-line comments begin with // and stop at the end of the line.
	- The line int main() is the main function where program execution begins.
	- The next line cout << "Hello World"; causes the message "Hello World" to be displayed on the screen.
	- The next line return 0; terminates main( )function and causes it to return the value 0 to the calling process.
	
- In C++, the semicolon (;) is a statement terminator.
- That is, each individual statement must be ended with a semicolon.
- it indicates the end of one logical entity.
Ex:	
	x = y;
	y = y + 1;
	add(x, y);

- A block is a set of logically connected statements that are surrounded by opening and closing braces. 
Ex:
	{
	   cout << "Hello World"; // prints Hello World
	   return 0;
	}
	
- C++ does not recognize the end of the line as a terminator. For this reason, it does not matter where you put a statement in a line. 
Ex:
	x = y;
	y = y + 1;
	add(x, y); 		same as 
	
	x = y; y = y + 1; add(x, y);
	
C++ Identifiers:
	- A C++ identifier is a name used to identify a variable, function, class, module, or any other user-defined item.
	- An identifier starts with a letter A to Z or a to z or an underscore (_) followed by zero or more letters, underscores, and digits (0 to 9).
	- C++ does not allow punctuation characters such as @, $, and % within identifiers.
	- C++ is a case-sensitive programming language. Thus, Manpower and manpower are two different identifiers in C++.

- C++ Has nearly 60+ Keywords defined in it. 
- These reserved words may not be used as constant or variable or any other identifier names.

- Trigraphs:
	- trigraph sequence -->  an alternative representation of few characters in C++.
	- A trigraph is a three-character sequence that represents a single character and the sequence always starts with two question marks.
	- Trigraphs are expanded anywhere they appear, including within string literals and character literals, in comments, and in preprocessor directives.
	Trigraph	Replacement
	??=				#
	??/				\
	??'				^
	??(				[
	??)				]
	??!				|
	??<				{
	??>				}
	??-				~
	
	- it is recommended to avoiod such Compilers that do not support trigraphs, else it will confuse a lot.

- Whitespace in C++:
	- A line containing only whitespace, possibly with a comment, is known as a blank line, and C++ compiler totally ignores it.
	- Whitespace is the term used in C++ to describe blanks, tabs, newline characters and comments.
	- Whitespace separates one part of a statement from another and enables the compiler to identify where one element in a statement, such as int, ends and the next element begins.
	Ex:
		int age;
		- In the above statement there must be at least one whitespace character (usually a space) between int and age for the compiler to be able to distinguish them.
		
		fruit = apples + oranges;   // Get the total fruit
		- In the above statement 2, no whitespace characters are necessary between fruit and =, or between = and apples, although you are free to include some if you wish for readability purpose.

Comments:
	- C++ supports single-line and multi-line comments. 
	- All characters available inside any comment are ignored by C++ compiler.
	- C++ comments start with /* and end with */.
	Ex:
		/* This is a comment */
		/* C++ comments can also
		   * span multiple lines
		*/
	- A comment can also start with //, extending to the end of the line. 
	Ex:
		// prints Hello World
***************************************************************************

Data Types:
- While writing program in any language, you need to use various variables to store various information.
- Variables are nothing but reserved memory locations to store values.
- This means that when you create a variable you reserve some space in memory.
- You may like to store information of various data types like character, wide character, integer, floating point, double floating point, boolean etc.
- Based on the data type of a variable, the operating system allocates memory and decides what can be stored in the reserved memory.
- Primitive Built-in Types:
	- C++ offers the programmer a rich assortment of built-in as well as user defined data types.
	Ex:
		<Type<					<Keyword>
		Boolean					bool
		Character				char
		Integer					int
		Floating point			float
		Double floating point	double
		Valueless				void
		Wide character			wchar_t
	
	- Several of the basic types can be modified using one or more of these type modifiers
	Ex:
		signed
		unsigned
		short
		long
	
	<Type>					<Typical Bit Width>					<Typical Range>
	char						1byte						-127 to 127 or 0 to 255
	unsigned char				1byte								0 to 255
	signed char					1byte							  -127 to 127
	int							4bytes					   -2147483648 to 2147483647
	unsigned int				4bytes							0 to 4294967295
	signed int					4bytes					   -2147483648 to 2147483647
	short int					2bytes							-32768 to 32767
	unsigned short int			Range							  0 to 65,535
	signed short int			Range							-32768 to 32767
	long int					4bytes					-2,147,483,648 to 2,147,483,647
	signed long int				4bytes							same as long int
	unsigned long int			4bytes						   0 to 4,294,967,295
	float						4bytes					+/- 3.4e +/- 38 (~7 digits)
	double						8bytes					+/- 1.7e +/- 308 (~15 digits)
	long double					8bytes					+/- 1.7e +/- 308 (~15 digits)
	wchar_t					2 or 4 bytes					    1 wide character

	- The size of variables might be different from those shown in the above table, depending on the compiler and the computer you are using.
	- to check correct size of various data types on your computer.
	Ex:
		#include <iostream>
		using namespace std;

		int main() {
		   cout << "Size of char : " << sizeof(char) << endl;
		   cout << "Size of int : " << sizeof(int) << endl;
		   cout << "Size of short int : " << sizeof(short int) << endl;
		   cout << "Size of long int : " << sizeof(long int) << endl;
		   cout << "Size of float : " << sizeof(float) << endl;
		   cout << "Size of double : " << sizeof(double) << endl;
		   cout << "Size of wchar_t : " << sizeof(wchar_t) << endl;
		   
		   return 0;
		}
	- This example uses endl, which inserts a new-line character after every line and << operator is being used to pass multiple values out to the screen.
	- We are also using sizeof() operator to get size of various data types.

- typedef Declarations:
	- You can create a new name for an existing type using typedef. 
	Ex:
		typedef type newname; 
		
		typedef int feet;
		feet distance;
	
- Enumerated Types:
	- An enumerated type declares an optional type name and a set of zero or more identifiers that can be used as values of the type.
	- Each enumerator is a constant whose type is the enumeration.
	- Creating an enumeration requires the use of the keyword enum. 
	Ex:
		enum enum-name { list of names } var-list; 
		
		- For example, the following code defines an enumeration of colors called colors and the variable c of type color. Finally, c is assigned the value "blue".
		enum color { red, green, blue } c;
		
		- By default, the value of the first name is 0, the second name has the value 1, and the third has the value 2, and so on. 
		- But you can give a name, a specific value by adding an initializer.
		- For example, in the following enumeration, green will have the value 5.
			enum color { red, green = 5, blue };
		- Here, blue will have a value of 6 because each name will be one greater than the one that precedes it.
****************************************************************************************************************

Variable Types:
	- A variable provides us with named storage that our programs can manipulate. 
	- Each variable in C++ has a specific type, which determines the size and layout of the variable's memory
	- The name of a variable can be composed of letters, digits, and the underscore character. 
	- It must begin with either a letter or an underscore. 
	- Upper and lowercase letters are distinct because C++ is case-sensitive
		bool --> Stores either value true or false.
		char --> Typically a single octet (one byte). This is an integer type.
		int --> The most natural size of integer for the machine.
		float --> A single-precision floating point value.
		double --> A double-precision floating point value.
		void --> Represents the absence of type.
		wchar_t --> A wide character type.
	- C++ also allows to define various other types of variables, which we will cover in subsequent chapters like Enumeration, Pointer, Array, Reference, Data structures, and Classes.

- Variable Definition in C++
	- A variable definition tells the compiler where and how much storage to create for the variable.
	- A variable definition specifies a data type, and contains a list of one or more variables of that type as follows
		type variable_list;
	- Here, type must be a valid C++ data type including char, w_char, int, float, double, bool or any user-defined object, etc.,
	- and variable_list may consist of one or more identifier names separated by commas.
		int    i, j, k;
		char   c, ch;
		float  f, salary;
		double d;
	- Variables can be initialized (assigned an initial value) in their declaration.
		extern int d = 3, f = 5;    // declaration of d and f. 
		int d = 3, f = 5;           // definition and initializing d and f. 
		byte z = 22;                // definition and initializes z. 
		char x = 'x';               // the variable x has the value 'x'.
	- For definition without an initializer: variables with static storage duration are implicitly initialized with NULL (all bytes have the value 0); the initial value of all other variables is undefined.

- Variable Declaration in C++
	- A variable declaration provides assurance to the compiler that there is one variable existing with the given type and name so that compiler proceed for further compilation without needing complete detail about the variable.
	- A variable declaration has its meaning at the time of compilation only, compiler needs actual variable definition at the time of linking of the program.
	- A variable declaration is useful when you are using multiple files and you define your variable in one of the files which will be available at the time of linking of the program.
	- You will use extern keyword to declare a variable at any place. 
	- Though you can declare a variable multiple times in your C++ program, but it can be defined only once in a file, a function or a block of code.
	Ex:
		#include <iostream>
		using namespace std;
		
		// Variable declaration:
		extern int a, b;
		extern int c;
		extern float f;
		  
		int main () {
		   // Variable definition:
		   int a, b;
		   int c;
		   float f;
		 
		   // actual initialization
		   a = 10;
		   b = 20;
		   c = a + b;
		 
		   cout << c << endl ;

		   f = 70.0/3.0;
		   cout << f << endl ;
		 
		   return 0;
		}
	
	- Same concept applies on function declaration where you provide a function name at the time of its declaration and its actual definition can be given anywhere else.
	Ex:
		// function declaration
		int func();
		int main() {
		   // function call
		   int i = func();
		}

		// function definition
		int func() {
		   return 0;
		}
		
- Lvalues and Rvalues:	
	lvalue 
		− Expressions that refer to a memory location is called "lvalue" expression.
		- An lvalue may appear as either the left-hand or right-hand side of an assignment.
		- Variables are lvalues and so may appear on the left-hand side of an assignment.
	rvalue
		- The term rvalue refers to a data value that is stored at some address in memory.
		- An rvalue is an expression that cannot have a value assigned to it which means an rvalue may appear on the right- but not left-hand side of an assignment.
		- Numeric literals are rvalues and so may not be assigned and can not appear on the left-hand side.
	Ex:	
	int g = 20; --> Valid
	10 = 20; --> invalid
************************************************************************
Variable Scope:
- A scope is a region of the program and broadly speaking there are three places, where variables can be declared
	local variables --> declared Inside a function or a block.
	global variables --> declared Outside of all functions or block.
	formal parameters --> defined In the definition of function parameters.

- Local Variables:
	- Variables that are declared inside a function or block are local variables. 
	- They can be used only by statements that are inside that function or block of code. 
	- Local variables are not known to functions outside their own.
	Ex:
		#include <iostream>
		using namespace std;
		 
		int main () {
		   // Local variable declaration:
		   int a, b;
		   int c;
		 
		   // actual initialization
		   a = 10;
		   b = 20;
		   c = a + b;
		 
		   cout << c;
		 
		   return 0;
		}
		
- Global Variables:
	- Global variables are defined outside of all the functions, usually on top of the program. 
	- The global variables will hold their value throughout the life-time of your program.
	- A global variable can be accessed by any function. 
	- That is, a global variable is available for use throughout your entire program after its declaration. 
	Ex:
		#include <iostream>
		using namespace std;
		 
		// Global variable declaration:
		int g;
		 
		int main () {
		   // Local variable declaration:
		   int a, b;
		 
		   // actual initialization
		   a = 10;
		   b = 20;
		   g = a + b;
		  
		   cout << g;
		 
		   return 0;
		}
	- A program can have same name for local and global variables but value of local variable inside a function will take preference.
	Ex:
		#include <iostream>
		using namespace std;
		 
		// Global variable declaration:
		int g = 20;
		 
		int main () {
		   // Local variable declaration:
		   int g = 10;
		 
		   cout << g;
		 
		   return 0;
		}
- Initializing Local and Global Variables:
	- When a local variable is defined, it is not initialized by the system, you must initialize it yourself.
	- Global variables are initialized automatically by the system when you define them
	Ex:
		Data Type	Initializer
		int				0
		char			'\0'
		float			0
		double			0
		pointer			NULL
*******************************************************************************

Constants and Literals:
- Constants refer to fixed values that the program may not alter and they are called literals.
- Constants can be of any of the basic data types and can be divided into Integer Numerals, Floating-Point Numerals, Characters, Strings and Boolean Values.
- Again, constants are treated just like regular variables except that their values cannot be modified after their definition.

- Integer Literals:
	- An integer literal can be a decimal, octal, or hexadecimal constant.
	-  A prefix specifies the base or radix: 
		0x or 0X for hexadecimal
		0 for octal
		nothing for decimal
	- An integer literal can also have a suffix that is a combination of U and L, for unsigned and long, respectively.
	- The suffix can be uppercase or lowercase and can be in any order.
		U for Unsigned
		L for Long
	Ex:
		212         // Legal
		215u        // Legal
		0xFeeL      // Legal
		078         // Illegal: 8 is not an octal digit
		032UU       // Illegal: cannot repeat a suffix
		
	- Various types of integer literals
	Ex:
		85         // decimal
		0213       // octal
		0x4b       // hexadecimal
		30         // int
		30u        // unsigned int
		30l        // long
		30ul       // unsigned long
		
- Floating-point Literals:
	- A floating-point literal has an integer part, a decimal point, a fractional part, and an exponent part.
	- You can represent floating point literals either in decimal form or exponential form.
	- While representing using decimal form, you must include the decimal point, the exponent, or both and while representing using exponential form, you must include the integer part, the fractional part, or both.
	- The signed exponent is introduced by e or E.
	Ex:
		3.14159       // Legal
		314159E-5L    // Legal
		510E          // Illegal: incomplete exponent
		210f          // Illegal: no decimal or exponent
		.e55          // Illegal: missing integer or fraction

- Boolean Literals:
	- There are two Boolean literals and they are part of standard C++ keywords
		- A value of true representing true.
		- A value of false representing false.
	- You should not consider the value of true equal to 1 and value of false equal to 0.
	
- Character Literals:
	- Character literals are enclosed in single quotes.
	- If the literal begins with L (uppercase only), it is a wide character literal (e.g., L'x') and should be stored in wchar_t type of variable .
	- Otherwise, it is a narrow character literal (e.g., 'x') and can be stored in a simple variable of char type.
	- A character literal can be the following:
		plain character (e.g., 'x') 
		escape sequence (e.g., '\t')
		universal character (e.g., '\u02C0')
	- There are certain characters in C++ when they are preceded by a backslash they will have special meaning and they are used to represent like newline (\n) or tab (\t). 
	
	Escape sequence			Meaning
		\\						\ character
		\'						' character
		\"						" character
		\?						? character
		\a						Alert or bell
		\b						Backspace
		\f						Form feed
		\n						Newline
		\r						Carriage return
		\t						Horizontal tab
		\v						Vertical tab
		\ooo					Octal number of one to three digits
		\xhh . . .				Hexadecimal number of one or more digits
		
- String Literals:
	- String literals are enclosed in double quotes.
	-  A string contains characters that are similar to character literals: 
		plain characters
		escape sequences
		universal characters
	- You can break a long line into multiple lines using string literals and separate them using whitespaces.
	- Here are some examples of string literals. All the three forms are identical strings.
	Ex:
		"hello, dear"

		"hello, \

		dear"

		"hello, " "d" "ear"
		
- Defining Constants:
	- There are two simple ways in C++ to define constants
		Using #define preprocessor.
		Using const keyword.
	- The #define Preprocessor:
		#include <iostream>
		using namespace std;

		#define LENGTH 10   
		#define WIDTH  5
		#define NEWLINE '\n'

		int main() {
		   int area;  
		   
		   area = LENGTH * WIDTH;
		   cout << area;
		   cout << NEWLINE;
		   return 0;
		}
	- The const Keyword:
		#include <iostream>
		using namespace std;

		int main() {
		   const int  LENGTH = 10;
		   const int  WIDTH  = 5;
		   const char NEWLINE = '\n';
		   int area;  
		   
		   area = LENGTH * WIDTH;
		   cout << area;
		   cout << NEWLINE;
		   return 0;
		}
************************************************************